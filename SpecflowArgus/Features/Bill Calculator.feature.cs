// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowArgus.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Bill Calculator", SourceFile="Features\\Bill Calculator.feature", SourceLine=0)]
    public partial class BillCalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Bill Calculator.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Bill Calculator", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void BillCalculationForNormalOrder(string countOfStarters, string countOfMains, string countOfDrinks, string expectedBill, string happyHour, string calculationMode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("countOfStarters", countOfStarters);
            argumentsOfScenario.Add("countOfMains", countOfMains);
            argumentsOfScenario.Add("countOfDrinks", countOfDrinks);
            argumentsOfScenario.Add("ExpectedBill", expectedBill);
            argumentsOfScenario.Add("HappyHour", happyHour);
            argumentsOfScenario.Add("CalculationMode", calculationMode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bill Calculation for normal order", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given(string.Format("the customer orders starters {0}  Mains {1} Drinks {2}", countOfStarters, countOfMains, countOfDrinks), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When(string.Format("the bill calculated for starters {0} mains {1} drinks {2} for {3} in {4}", countOfStarters, countOfMains, countOfDrinks, happyHour, calculationMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.Then(string.Format("Verify the bill is correct {0}", expectedBill), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bill Calculation for normal order, 4", SourceLine=8)]
        public virtual void BillCalculationForNormalOrder_4()
        {
#line 3
this.BillCalculationForNormalOrder("4", "4", "4", "59.4", "false", "Creation", ((string[])(null)));
#line hidden
        }
        
        public virtual void BillCalculationWithHappyHours(string countOfStarters, string countOfMains, string countOfDrinks, string happyHour, string calculationMode, string expectedBill, string addedcountOfStarters, string addedcountOfMains, string addedcountOfDrinks, string newHappyHour, string newCalculationMode, string expectedBillafterupdation, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("countOfStarters", countOfStarters);
            argumentsOfScenario.Add("countOfMains", countOfMains);
            argumentsOfScenario.Add("countOfDrinks", countOfDrinks);
            argumentsOfScenario.Add("HappyHour", happyHour);
            argumentsOfScenario.Add("CalculationMode", calculationMode);
            argumentsOfScenario.Add("ExpectedBill", expectedBill);
            argumentsOfScenario.Add("AddedcountOfStarters", addedcountOfStarters);
            argumentsOfScenario.Add("AddedcountOfMains", addedcountOfMains);
            argumentsOfScenario.Add("AddedcountOfDrinks", addedcountOfDrinks);
            argumentsOfScenario.Add("NewHappyHour", newHappyHour);
            argumentsOfScenario.Add("NewCalculationMode", newCalculationMode);
            argumentsOfScenario.Add("ExpectedBillafterupdation", expectedBillafterupdation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bill Calculation with Happy Hours", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given(string.Format("the customer orders starters {0}  Mains {1} Drinks {2}", countOfStarters, countOfMains, countOfDrinks), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When(string.Format("the bill calculated for starters {0} mains {1} drinks {2} for {3} in {4}", countOfStarters, countOfMains, countOfDrinks, happyHour, calculationMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then(string.Format("Verify the bill is correct {0}", expectedBill), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.When(string.Format("the bill calculated for starters {0} mains {1} drinks {2} for {3} in {4}", addedcountOfStarters, addedcountOfMains, addedcountOfDrinks, newHappyHour, newCalculationMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.Then(string.Format("Verify the bill is correct {0}", expectedBillafterupdation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bill Calculation with Happy Hours, 1", SourceLine=19)]
        public virtual void BillCalculationWithHappyHours_1()
        {
#line 11
 this.BillCalculationWithHappyHours("1", "2", "2", "true", "Creation", "23.65", "0", "2", "2", "false", "Updation", "44.55", ((string[])(null)));
#line hidden
        }
        
        public virtual void BillCalculationAfterCancellationOfTheOrders(string countOfStarters, string countOfMains, string countOfDrinks, string happyHour, string calculationMode, string expectedBill, string removedcountOfStarters, string removedcountOfMains, string removedcountOfDrinks, string newHappyHour, string newCalculationMode, string expectedBillafterupdation, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("countOfStarters", countOfStarters);
            argumentsOfScenario.Add("countOfMains", countOfMains);
            argumentsOfScenario.Add("countOfDrinks", countOfDrinks);
            argumentsOfScenario.Add("HappyHour", happyHour);
            argumentsOfScenario.Add("CalculationMode", calculationMode);
            argumentsOfScenario.Add("ExpectedBill", expectedBill);
            argumentsOfScenario.Add("RemovedcountOfStarters", removedcountOfStarters);
            argumentsOfScenario.Add("RemovedcountOfMains", removedcountOfMains);
            argumentsOfScenario.Add("RemovedcountOfDrinks", removedcountOfDrinks);
            argumentsOfScenario.Add("NewHappyHour", newHappyHour);
            argumentsOfScenario.Add("NewCalculationMode", newCalculationMode);
            argumentsOfScenario.Add("ExpectedBillafterupdation", expectedBillafterupdation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bill Calculation after cancellation of the orders", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given(string.Format("the customer orders starters {0}  Mains {1} Drinks {2}", countOfStarters, countOfMains, countOfDrinks), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.When(string.Format("the bill calculated for starters {0} mains {1} drinks {2} for {3} in {4}", countOfStarters, countOfMains, countOfDrinks, happyHour, calculationMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then(string.Format("Verify the bill is correct {0}", expectedBill), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.When(string.Format("the bill calculated for starters {0} mains {1} drinks {2} for {3} in {4}", removedcountOfStarters, removedcountOfMains, removedcountOfDrinks, newHappyHour, newCalculationMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then(string.Format("Verify the bill is correct {0}", expectedBillafterupdation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bill Calculation after cancellation of the orders, 4", SourceLine=30)]
        public virtual void BillCalculationAfterCancellationOfTheOrders_4()
        {
#line 22
 this.BillCalculationAfterCancellationOfTheOrders("4", "4", "4", "false", "Creation", "59.4", "1", "1", "1", "false", "Cancellation", "44.55", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
